apiVersion: v1
data:
  kubeconfig: apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lJUTlNZ1BabnNEMFF3RFFZSktvWklodmNOQVFFTEJRQXdOekVTTUJBR0ExVUUKQ3hNSmIzQmxibk5vYVdaME1TRXdId1lEVlFRREV4aHJkV0psTFdGd2FYTmxjblpsY2kxc1lpMXphV2R1WlhJdwpIaGNOTWpJeE1ESTNNRGN3TVRVM1doY05Nekl4TURJME1EY3dNVFUzV2pBM01SSXdFQVlEVlFRTEV3bHZjR1Z1CmMyaHBablF4SVRBZkJnTlZCQU1UR0d0MVltVXRZWEJwYzJWeWRtVnlMV3hpTFhOcFoyNWxjakNDQVNJd0RRWUoKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVBsZjBpeERvOVNTWklkTlErVHNoTFYxU0lJalg1awpBakNYMEwvbHZPOHJ4eXY3RGVtUU5QeWh2ZkxaYXR1R1JUNERlTzBxYm95V0I2Wk5FMExIdjJyUDJpQ2wwRVU2Cmtjb29KZkwydjl1TGVLWFFUN1BBSEx2Ymx1VFdJNTNhN3dtRFk2eTdLQ0UvSTNuMWZwcmJlK2U2RWtjbm01V1UKYXBrWjZJWHVUdTM1S2x4Uy9OdUZmcXVIV01qa1dlRkYyM1VsaEFjaVllOEFEZ1FZNGZ6TDBoRnRWL0d3QW9WZwpLNHJUV1hRenFTVnJia3liUWVOQ3FwMFpJWG4vZ3JKeFlWaG8yVWFieUk0NnJ0UFpHOUZUREhGb2xjRTJ4R1ZpCkJ6VSs3a0MyTkZDWHBxY080NHRCWmp5UTNlekZqYWw5V3B0ZjZEczg0TlU4dFR3VHZnK2ZqemtDQXdFQUFhTkMKTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk9vSgplamZzNVpkV0FrYnNJZllDQ1BGMTY1Uk9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUM4SFNCcVpEQkl3eWUvCldWSzFoY3poZnUxQjhQN2pTbmUyRUw2RHArMXpua3dLalRxZTZ2d0xLWnMwbDBMaVlKeE42Qk95OGFXKzJqdUgKZXNiTm44YmhlbHA1MVBjOC9EbG9MUFB1ZHZRMGJ5MkNrS2h5UG5paHdIQndyL0ZBdUVBdTBVLzNZU21MUU15WQp0TkdkUXg5cm9vcndKMVVKTlF1UW9TSGc5TDFJQUlxaXJLUFdtRGZiVTExWWJJUHJJcUNwREk3M1d6eVAxeHBTCkxZUkJuT0MyYzlqMXVMd1JkblpuRm9CZTZoZEFDblRTeTZCQ2RwUnRZekRlR1Noc2s1QVY5SnQ3MW8zTFJDeWMKN20rc09YS29jS0pOOU5COWFyRy8ra2dvRjRUbTEzU1JYUEo1OXFGTGNhZVk4T2xWVXV2QXBZelpDOWVBVTBUbwpqYU5sbEppUQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEUURDQ0FpaWdBd0lCQWdJSVJ2ZFVSVGcvd3g0d0RRWUpLb1pJaHZjTkFRRUxCUUF3UGpFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNU2d3SmdZRFZRUURFeDlyZFdKbExXRndhWE5sY25abGNpMXNiMk5oYkdodmMzUXQKYzJsbmJtVnlNQjRYRFRJeU1UQXlOekEzTURFMU5sb1hEVE15TVRBeU5EQTNNREUxTmxvd1BqRVNNQkFHQTFVRQpDeE1KYjNCbGJuTm9hV1owTVNnd0pnWURWUVFERXg5cmRXSmxMV0Z3YVhObGNuWmxjaTFzYjJOaGJHaHZjM1F0CmMybG5ibVZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE2SVkrOWtjeG9yTm0KK255ZVZmd3hVZytVQjNwczF4VDB4V0oxZXNVTkVybTVKY3pQR094NkxpOUt2WGlhbWpXakx3ckQ5N1ZYaUhQaQpKdVpkQk1QUStFYmJMaWF2cDZnNU51czR1WEFSbHFDajVSamsreGN5WURnOGo2WDhLSEE3N1BUbFFESk9qRmFkCkRYNThCVVFEUmx0MzlqWlI2RzNlS3dKbzJjc0pKdGZoY2N5bmFvTHNXcVRBQU5JeUpzTkdtZmdLcThUTGxhUXEKeWZWVE52Uks0cmxlQjFEVDBKcmhsMk5ZYUEyWm5uWWIzbXZ1Z29WMHBkbGFnQ1FrVHVDZFFHeTE3SW1mR1p1KwpMZnFES0xHWVNNV1QxaDI5Y2ZFa0tNQzFsUW9nbTI1NjRTTU5xTWVqNnd4QW8zbjl2YVliYUQraS9reHh3bnRNCjI1WS9YUnhzZHdJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVTFnNElsZm5yYmZrdnh6TVp3azMrYVYvYzNsQXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVvcDFoRWFTeGp5MjdrcXB0K1dTSGIxU1RUM01jRHdLclU1UXpZNVllSk81RnpuaXpjaUw3SDJmUnQ5CkpLNW5FS0tGeXpIcnp6eUF0aWJVclovcTVrdWFzYVFudXVxYkZQVjJ4b3NyeWprdzhNUW13NWplSFRyT1pjckoKYXRIWUVtOE83R0FXK3BDRDZNZi95akZEYnpOVkNqVUZuN2xONFQ5bnJWdHo0SUpiQ2NvVkZVMFphUlk4QVdSegphejlUZTdqeGtzaXpYdE1CTjJDSHF0a1VvWndxVVljRGc4MURYMmkvMWYrQkZYNlpSenQ2R1pLbExtby9USUQvCnlMYXlMUUFMdC92Nmc1ZGJpTHB1ajhPVG82cmw2alh4Wnh6MDdTVVZpT0lnb0tra1lrY0doc1pwR21OdnNkZFYKSiswNFBON1JScXRNZ29PazdvMjRDTFE1YXFZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEVERDQ0FqU2dBd0lCQWdJSVFoUHVhQzZiL1NNd0RRWUpLb1pJaHZjTkFRRUxCUUF3UkRFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNUzR3TEFZRFZRUURFeVZyZFdKbExXRndhWE5sY25abGNpMXpaWEoyYVdObExXNWwKZEhkdmNtc3RjMmxuYm1WeU1CNFhEVEl5TVRBeU56QTNNREUxTmxvWERUTXlNVEF5TkRBM01ERTFObG93UkRFUwpNQkFHQTFVRUN4TUpiM0JsYm5Ob2FXWjBNUzR3TEFZRFZRUURFeVZyZFdKbExXRndhWE5sY25abGNpMXpaWEoyCmFXTmxMVzVsZEhkdmNtc3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQXJ0aDNlSDc3OHIwaGZ3NWlULzNvU3MvMHdlbTNRTVV1V2U2MCtRWC9leTI5NUx4ajgrb1VsSHU3Q2dzcgprMW0zeG5lNDVXc2VuQ2JVdFZEVkxBRUU1bHRqaHZQTzNXaG14ai9YdTZOeHBzMkcraEJYL3J4Nnc1Y29XVzNyCkQ5Y2Ird290cVF3NjhWakJtdFhFUzdXWWJXM0RRWHRSZUdqY0RSMGI1RW50ajRxeFZEOGdzL1JMV0dsSWNjcXkKeThrZWw2dXd0M1g4OFY2ZEJDeXlGQ3BZM1dwYTl0aW9WZTZLSWZRSXQ0eHdMOVErSUtiRFpQS3JBOTFsNE82bgpYS1NFTHM1SktKZlptdER6M1V0RWlHN2luaDFSMzFYTm1CbDNjTXlEWTdoN3oxU1VQeDI0eXFQdkR0dm1jUksrCjFyenpFSHk4L0lDVExVcWg5MzFITUptTUR3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVTM1hSRXRQb2taS01zemFUZjZvZjNCbEk3K0F3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIckdsUGdZNTQrajAvVTMyOENZNmtqc0swRkNQQ0s4Q0NhVWRJNXF6dmZICmw5Ym85TjdqazRBRWh1dzVVNVRmVXFsajdzYTQzTHhkSzg0Q0FiSlowamc5bmpoOExPQjJMR3pLZitFL2pVSXIKbTFRWExQU2VwL01WbXFxSS81bE9xa2ZPWmZIR3pOUncydTVnRk1OZkFibUE1Q2liTkdVcEJNL28yVHZPRm9QaQpvS1dEdnpUVTc1TWhIZFZaMUU4VVlFSXcvRmhrZ0sxR3F2dUZjMEhJYVF6NFg5elRoS25kRWhCSHltRHpTcTM0CkRBelQvWkFSL2lPMG9mVXEvVTNxeXdBUjZWUUZka25ZRi9OaEN1dU56Vk9CbGdOMENOaXZUNURQN3NHeUZhcGIKZ1JnOEhpZFNHbm11bkdCZit0c0l5SHVKRVRRWlhDbE91Z205YWN1UzBCZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRGx6Q0NBbitnQXdJQkFnSUlMcFVsaStrQ0hvQXdEUVlKS29aSWh2Y05BUUVMQlFBd1dURlhNRlVHQTFVRQpBd3hPYjNCbGJuTm9hV1owTFd0MVltVXRZWEJwYzJWeWRtVnlMVzl3WlhKaGRHOXlYMnh2WTJGc2FHOXpkQzF5ClpXTnZkbVZ5ZVMxelpYSjJhVzVuTFhOcFoyNWxja0F4TmpZMk9EVTJNalEwTUI0WERUSXlNVEF5TnpBM016Y3kKTkZvWERUTXlNVEF5TkRBM016Y3lOVm93V1RGWE1GVUdBMVVFQXd4T2IzQmxibk5vYVdaMExXdDFZbVV0WVhCcApjMlZ5ZG1WeUxXOXdaWEpoZEc5eVgyeHZZMkZzYUc5emRDMXlaV052ZG1WeWVTMXpaWEoyYVc1bkxYTnBaMjVsCmNrQXhOalkyT0RVMk1qUTBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTlTdXAKdGdFRVlqb3NwZ2F0RFFyeEJ5SHpYaTcxaXBGOFRSOFdPQ2JRYVh3THVtaGVqTmZXNHJ2Q1lPZ05pRUZJQ21HNAp0TFhxWDh3TFBsTkszb2Z3bmhzYXNJSWphakdGYTFtcURMek5IT1pPUEVjVWZUS1RlM29RaG90ZHAveHJBM1pXCi93TmhIdlhNem9XM3E0NmxKTDArdnY0NS9FL2NQSllyUFY1bkswTHRuQkJuaXRJeGJucVBEbXFHTCtpSUFBMksKSUNnSnhyUm00T1M3RFQvT2FVSGsyOHpLMUVTcWJ4eXcwd283Y3hkNnZHV3pqM2txZWduRFJRVWVvdFNKamFmdApGVk1jdStUUWk2ZDhOUkpMbVMzeTRCVTRkM3NtK2w1S2MyN3VLdGFrMGt1QlVVOE5pREs0UHp1bmtnMEpCYVNKCkVaZjBWN3laRzFjTTJSSFdKUUlEQVFBQm8yTXdZVEFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVaWk3NEdyQXRVUS96VmlwRHpiU0lMYi80WXBBd0h3WURWUjBqQkJndwpGb0FVaWk3NEdyQXRVUS96VmlwRHpiU0lMYi80WXBBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFcm8vWkQ2Cnl6YWZaWGl5UXRLdGg2cUxqRWRTdDdJNzViZ1oxNDNJTEUwQlp5Z2JMc0R1ejJSTDMreE9FRm9YdjFjZzBoV0gKb0U2ckxraSt3TjRYK1R5WDhsUktRd1hEQ1RRR1VWVjZUZXUxRFIvTXBqSW8xOWpIamV6Vmk1R2lkeXI0UHRTOQowNDRmcWdhbG40WGNaaGxLUmZmZEx2MW5lSXpKS25vV0JuVW9uRE5KZmMxZitGNzNIcUJoUzl4Zm1YRk91OGF3ClZtcHhOVUVxTzdzL0Z4TDVQRGVYdzE3ZVErT3k3YjNkY2Yvb0dxNU5aZklEdzdEMXEwczhkNWxUa241bXRwR2wKM1l2K0FHVEdPeXJmakYwR0lZZy83RkhEQVJaOUorUlJWV3o0ZTVnWnB5akhXZkxCK1FCMWgvbEVTTTFxRGlaQQoydngvNUZTeWh5ckJheUU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZRakNDQkNxZ0F3SUJBZ0lTQTEyRjFjQk1zUi9LYlRjaktYZE9ndGM1TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNakV3TWpjeU1qQXpOVEJhRncweU16QXhNalV5TWpBek5EbGFNQjB4R3pBWkJnTlZCQU1UCkVtRndhUzVtYjI4dVpXWnZjbTFoZEM1dFpUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFNT0R6eVQ5TXVIK2w4MjB1TUZpbXVWSTliVkFZZjcwVURWUlkyeGQrT09BTE1zWnJuUTgwclN5WkQ1YQplNnhrRmZxTTJnS1Y1T3d6TkRQTkNqVis0L25CVlV2aWZCMXFPWVdCR2tJbVdiblB0TFZreTUyalZrQy9OK2xPCnZ5ZGhsd0RrMGh1OE5pY0Y5QmlabWtsUFFYZGlMWUh6b3VQUDRXWnFSSVN5WHg0aTFOV2dWTU53RVhDUFFEY2EKOFJkRWV1ODdzZVY5Q3p1d051VHpCWUhqa2xRSWdScUhzV1hhNW1UcDdsRkRTdkw1NVM1NXJoNXFNN0YvVjlHOQpycnpYcHRvWitUekM3b1dzZWg0TXdXRTVNNXREZVJWenk0K1ljcmZyRzZrRmVKQkVQWW9mRlYvcHltdW4vZ09vCnJKWGVCL2FYOXJ4R295ekVOU0JmMHR0anZFVUNBd0VBQWFPQ0FtVXdnZ0poTUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZApCZ05WSFE0RUZnUVVlY3F5SzVWeC8xSEE2TzJjemp4SS8wRis2TUl3SHdZRFZSMGpCQmd3Rm9BVUZDNnpGN2RZClZzdXVVQWxBNWgrdm5Zc1V3c1l3VlFZSUt3WUJCUVVIQVFFRVNUQkhNQ0VHQ0NzR0FRVUZCekFCaGhWb2RIUncKT2k4dmNqTXVieTVzWlc1amNpNXZjbWN3SWdZSUt3WUJCUVVITUFLR0ZtaDBkSEE2THk5eU15NXBMbXhsYm1OeQpMbTl5Wnk4d05BWURWUjBSQkMwd0s0SVZLaTVoY0hCekxtWnZieTVsWm05eWJXRjBMbTFsZ2hKaGNHa3VabTl2CkxtVm1iM0p0WVhRdWJXVXdUQVlEVlIwZ0JFVXdRekFJQmdabmdRd0JBZ0V3TndZTEt3WUJCQUdDM3hNQkFRRXcKS0RBbUJnZ3JCZ0VGQlFjQ0FSWWFhSFIwY0RvdkwyTndjeTVzWlhSelpXNWpjbmx3ZEM1dmNtY3dnZ0VGQmdvcgpCZ0VFQWRaNUFnUUNCSUgyQklIekFQRUFkd0I2TW94VTJMY3R0aURxT09CU0h1bUVGbkF5RTRWTk85SXJ3VHBYCm8xTHJVZ0FBQVlRYnNBTFdBQUFFQXdCSU1FWUNJUURaalRBODFhQURTU2Rtb3lQR0IwMnVpYnN2SVorSGs1UzEKVE9IRjdTckNpUUloQUp0TkdwclhySVNJQ2xhb3pKUTQ2eUZxbk9WenZjZ3preEF2aTJIcW5mQ3dBSFlBNkQ3UQoyajcxQmpVeTUxY292SWxyeVFQVHk5RVJhK3pyYWVGM2ZXMEd2VzRBQUFHRUc3QUN3UUFBQkFNQVJ6QkZBaUVBCjBzN0dhNVo4UlpQV1BNOE1LMUxXQVJUMjZrVmxNbEExaE5jankyVTBJZThDSUdNYmlkTkVmLzgyZDFQZ2p0QkoKbU1CalBETFQwKzNLRkdYbGRRbCtIQlpyTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDRDV2RE9tYVdvYUo0SwpTRFZEaXJoUHRoRDlTdXkrK1Nja2Q1bC9YSVU5RDFKc2wyamtQK1p0SnVFU1JBV0ZxYmo1SFRHK2NUcTQybnMvCkZoeE9sMDB6TVpaWU1UdVFFSXN4VDcwenczeldLRXlNNUQ3dThGOXY5THhtN1plVWVqbjQxNDdOdGdOc3N2MHAKdzM1eVBQUytxYkgzTnRWSnRQQ1pQNGJWTDhvTkloTnRRcHVrbnhVY25LQUhwaG5Na0R5UkJUOEZVSmxmODVTcwpIY28wWERaVFl4OU0wdXF5U2FEZ282RUN2WjJOLzlPeDRsb0JwVk4vVmdaN1hsLzd2ZFpvNFpiaDZpamJaSnBqCmZET0M3WmVqZXpRUXVjNlgvY01wOU4xSElCQ1BDcGpEQ2p4NGR4N1pCbDRkc2ZDTWlQTTM0aWNydiszQzdyK08KaTdjUC90d0EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRkZqQ0NBdjZnQXdJQkFnSVJBSkVyQ0VyUERCaW5VL2JXTGlXblgxb3dEUVlKS29aSWh2Y05BUUVMQlFBdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3SGhjTk1qQXdPVEEwTURBd01EQXcKV2hjTk1qVXdPVEUxTVRZd01EQXdXakF5TVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5UR1YwSjNNZwpSVzVqY25sd2RERUxNQWtHQTFVRUF4TUNVak13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUM3QWhVb3pQYWdsTk1QRXV5TlZaTEQrSUx4bWFaNlFvaW5YU2FxdFN1NXhVeXhyNDVyK1hYSW85Y1AKUjVRVVZUVlhqSjZvb2prWjlZSThRcWxPYnZVN3d5N2JqY0N3WFBOWk9PZnR6Mm53V2dzYnZzQ1VKQ1dIK2pkeApzeFBuSEt6aG0rL2I1RHRGVWtXV3FjRlR6alRJVXU2MXJ1MlAzbUJ3NHFWVXE3WnREcGVsUURScks5TzhadXRtCk5IejZhNHVQVnltWitEQVhYYnB5Yi91QnhhM1NobGc5RjhmbkNidnhLL2VHM01IYWNWM1VSdVBNclNYQmlMeGcKWjNWbXMvRVk5NkpjNWxQL09vaTJSNlgvRXhqcW1BbDNQNTFUK2M4QjVmV21jQmNVcjJPay81bXprNTNjVTZjRwova2lGSGFGcHJpVjF1eFBNVWdQMTdWR2hpOXNWQWdNQkFBR2pnZ0VJTUlJQkJEQU9CZ05WSFE4QkFmOEVCQU1DCkFZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUJJR0ExVWRFd0VCL3dRSU1BWUIKQWY4Q0FRQXdIUVlEVlIwT0JCWUVGQlF1c3hlM1dGYkxybEFKUU9ZZnI1MkxGTUxHTUI4R0ExVWRJd1FZTUJhQQpGSG0wV2VaN3R1WGtBWE9BQ0lqSUdsajI2WnR1TURJR0NDc0dBUVVGQndFQkJDWXdKREFpQmdnckJnRUZCUWN3CkFvWVdhSFIwY0RvdkwzZ3hMbWt1YkdWdVkzSXViM0puTHpBbkJnTlZIUjhFSURBZU1CeWdHcUFZaGhab2RIUncKT2k4dmVERXVZeTVzWlc1amNpNXZjbWN2TUNJR0ExVWRJQVFiTUJrd0NBWUdaNEVNQVFJQk1BMEdDeXNHQVFRQgpndDhUQVFFQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQ0Z5azVIUHFQM2hVU0Z2TlZuZUxLWVk2MTFUUjZXClBUTmxjbFF0Z2FEcXcrMzRJTDlmekxkd0FMZHVPL1plbE43a0lKK203NHV5QStlaXRSWThrYzYwN1RrQzUzd2wKaWtmbVpXNC9SdlRaOE02VUsrNVV6aEs4akNkTHVNR1lMNkt2elhHUlNnaTN5TGdqZXdRdENQa0lWejZEMlFRegpDa2NoZUFtQ0o4TXF5SnU1emx6eVpNakF2bm5BVDQ1dFJBeGVrcnN1OTRzUTRlZ2RSQ25iV1NEdFk3a2grQkltCmxKTlhvQjFsQk1FS0lxNFFEVU9Yb1JnZmZ1RGdoamUxV3JHOU1MK0hiaXNxL3lGT0d3WEQ5UmlYOEY2c3c2VzQKYXZBdXZEc3p1ZTVMM3N6ODVLK0VDNFkvd0ZWRE52Wm80VFlYYW82WjBmK2xRS2MwdDhEUVl6azFPWFZ1OHJwMgp5Sk1DNmFsTGJCZk9EQUxadllIN243ZG8xQVpsczRJOWQxUDRqbmtEclFveEIzVXFROWhWbDNMRUtRNzN4RjFPCnlLNUdoRERYOG9WZkdLRjV1K2RlY0lzSDRZYVR3N21QM0dGeEpTcXYzKzBsVUZKb2k1TGM1ZGExNDlwOTBJZHMKaENFeHJvTDErN21yeUlrWFBlRk01VGdPOXIwcnZaYUJGT3ZWMnowZ3AzNVowK0w0V1BsYnVFak4vbHhQRmluKwpIbFVqcjhnUnNJM3FmSk9RRnkvOXJLSUpSMFkvOE9td3QvOG9UV2d5MW1kZUhtbWprN2oxbllzdkM5SlNRNlp2Ck1sZGxUVEtCM3poVGhWMStYV1lwNnJqZDVKVzF6YlZXRWtMTnhFN0dKVGhFVUczc3pnQlZHUDdwU1dUVVRzcVgKbkxSYndIT29xN2hId2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGWURDQ0JFaWdBd0lCQWdJUVFBRjNJVGZVNlVLNDduYXFQR1FLdHpBTkJna3Foa2lHOXcwQkFRc0ZBREEvCk1TUXdJZ1lEVlFRS0V4dEVhV2RwZEdGc0lGTnBaMjVoZEhWeVpTQlVjblZ6ZENCRGJ5NHhGekFWQmdOVkJBTVQKRGtSVFZDQlNiMjkwSUVOQklGZ3pNQjRYRFRJeE1ERXlNREU1TVRRd00xb1hEVEkwTURrek1ERTRNVFF3TTFvdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3Z2dJaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUN0NkNSejlCUTM4NXVlSzFjb0hJZSszTGZmT0pDTWJqem1WNkI0OTNYQwpvdjcxYW03MkFFOG8yOTVvaG14RWs3YXhZLzBVRW11L0g5THFNWnNoZnRFelBMcEk5ZDE1MzdPNC94THhJWnBMCndZcUdjV2xLWm1ac2ozNDhjTCt0S1NJRzgrVEE1b0N1NGt1UHQ1bCtsQU9mMDBlWGZKbElJMVBvT0s1UENtK0QKTHRGSlY0eUFkTGJhTDlBNGpYc0RjQ0ViZGZJd1BQcVBydDNhWTZ2ckZrL0NqaEZMZnM4TDZQKzFkeTcwc250Swo0RXdTSlF4d2pRTXBvT0ZUSk93VDJlNFp2eEN6U293L2lhTmhVZDZzaHdlVTlHTng3QzdpYjF1WWdlR0pYRFI1CmJIYnZPNUJpZWViYnBKb3ZKc1hRRU9FTzN0a1FqaGI3dC9lbzk4ZmxBZ2VZanpZSWxlZmlONVlOTm5XZSt3NXkKc1IyYnZBUDVTUVhZZ2QwRnRDcldRZW1zQVhhVkNnL1kzOVc5RWg4MUx5Z1hiTktZd2FnSlpIZHVSemU2enF4WgpYbWlkZjNMV2ljVUdRU2srV1Q3ZEp2VWt5UkduV3FOTVFCOUdvWm0xcHpwUmJvWTdubjF5cHhJRmVGbnRQbEY0CkZRc0RqNDNRTHdXeVBudEtIRXR6QlJMOHh1cmdVQk44UTVOMHM4cDA1NDRmQVFqUU1OUmJjVGEwQjdyQk1EQmMKU0xlQ081aW1mV0NLb3FNcGdzeTZ2WU1FRzZLREEwR2gxZ1h4RzhLMjhLaDhoanRHcUVncWlOeDJtbmEvSDJxbApQUm1QNnpqelpON0lLdzBLS1AvMzIrSVZRdFFpMENkZDRYbitHT2R3aUsxTzV0bUxPc2JkSjFGdS83eGs5VE5EClR3SURBUUFCbzRJQlJqQ0NBVUl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FRWXcKU3dZSUt3WUJCUVVIQVFFRVB6QTlNRHNHQ0NzR0FRVUZCekFDaGk5b2RIUndPaTh2WVhCd2N5NXBaR1Z1ZEhKMQpjM1F1WTI5dEwzSnZiM1J6TDJSemRISnZiM1JqWVhnekxuQTNZekFmQmdOVkhTTUVHREFXZ0JURXA3R2tleXh4Cit0dmhTNUIxLzhRVllJV0pFREJVQmdOVkhTQUVUVEJMTUFnR0JtZUJEQUVDQVRBL0Jnc3JCZ0VFQVlMZkV3RUIKQVRBd01DNEdDQ3NHQVFVRkJ3SUJGaUpvZEhSd09pOHZZM0J6TG5KdmIzUXRlREV1YkdWMGMyVnVZM0o1Y0hRdQpiM0puTUR3R0ExVWRId1ExTURNd01hQXZvQzJHSzJoMGRIQTZMeTlqY213dWFXUmxiblJ5ZFhOMExtTnZiUzlFClUxUlNUMDlVUTBGWU0wTlNUQzVqY213d0hRWURWUjBPQkJZRUZIbTBXZVo3dHVYa0FYT0FDSWpJR2xqMjZadHUKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBS2N3QnNsbTcvRGxMUXJ0Mk01MW9HclMrbzQ0Ky95UW9ERlZEQwo1V3hDdTIrYjlMUlB3a1NJQ0hYTTZ3ZWJGR0p1ZU43c0o3bzVYUFdpb1c1V2xIQVFVN0c3NUsvUW9zTXJBZFNXCjlNVWdOVFA1MkdFMjRIR050TGkxcW9KRmxjRHlxU01vNTlhaHkyY0kycUJETEtvYmt4L0ozdldyYVYwVDlWdUcKV0NMS1RWWGtjR2R0d2xmRlJqbEJ6NHBZZzFodG1mNVg2RFlPOEE0anF2MklsOURqWEE2VVNiVzFGelhTTHI5TwpoZThZNElXUzZ3WTdiQ2tqQ1dEY1JRSk1FaGc3NmZzTzN0eEUrRmlZcnVxOVJVV2hpRjFteXY0UTZXK0N5QkZDCkRmdnA3T09HQU42ZEVPTTQrcVI5c2Rqb1NZS0VCcHNyNkd0UEFRdzRkeTc1M2VjNQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://api.foo.eformat.me:6443
  name: default-cluster
contexts:
- context:
    cluster: default-cluster
    namespace: default
    user: default-auth
  name: default-context
current-context: default-context
kind: Config
preferences: {}
users:
- name: default-auth
  user:
    token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjR2anVMTUdKVWJxM0NoN1lhQ3hrRTlqcnpsZnJEWHJmRWUyWEpTQTNfdWsifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTY5OTk1NTA1MiwiaWF0IjoxNjY4ODUxMDUyLCJpc3MiOiJodHRwczovL2t1YmVybmV0ZXMuZGVmYXVsdC5zdmMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6Im1pY3Jvc2hpZnQiLCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoibWljcm9zaGlmdC1ib290c3RyYXAtc2EiLCJ1aWQiOiJjYWU0NWYyNy0wN2ZhLTQ5MzItODBlYy04NGMwMGIxOWFjZTMifX0sIm5iZiI6MTY2ODg1MTA1Miwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Om1pY3Jvc2hpZnQ6bWljcm9zaGlmdC1ib290c3RyYXAtc2EifQ.JUKH7GByR6DbAhPveBANX1sENg3hSUKmsT-nZz6-H4VTIldac2ST8gRv8sinTYxVxj7MDTj3QuT6BoLvklJUxaoqATSLzr5t7Mpil_KkoWevkmBHLyJg8mhJIrgCDilNkNWide-7nap54I-VCNWZhL3eT7A9CUj1fl4U54sJkb_RNQuOpnlqSxBX7PQ2K5h2HJNoxmJEitTC2o6nRlUKmzJH6v605cYCXw5iV0zaw03096qD99ODwguJq1YKO4YzHxmPXIbeudz5mRQ6ReSHkyFbm2uqN-_5k5clNCI7xSyhtgAcemGed5jx3vOsIDyMiFyaB4EmI6_sUwYeQAoTiS7z_6eUVMexsD1CjVHMP8wFZE9G1VG1glhk19raM3wrfdVJQtZy2c_VftnXYyuYQTZB7HjLT4wOQnoOifrPi1tManw76kXWeovFOQeTqosrY6VJ5P-aWtFFFJeH9tCD4T2ePuDQEKmQfiLwnkFLrTJhfGo-NxAYy50qDnhQz-Oth6y8TYBdPGe9ygqOLz4F6aTunD0zV4j_oCFqSCMwBazoI7-xR3LJ2k-bCUGYdYhkIEE_npiDaKTpfvMiFEnLgyK3-3mO984CEioobAktMLoC6d5gJXZZiiyVtO1R0FNniTDIsO2egWdn0vzgP50Z9wF6YlGXaGp_ghj-DpYKoaI

kind: Secret
metadata:
  name: bootstrap-hub-kubeconfig
  namespace: open-cluster-management-agent
type: Opaque

